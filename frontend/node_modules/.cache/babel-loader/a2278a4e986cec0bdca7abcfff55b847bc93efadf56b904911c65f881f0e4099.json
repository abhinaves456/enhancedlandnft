{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abhinav\\\\Downloads\\\\EnhancedLandNFT\\\\EnhancedLandNFT\\\\frontend\\\\src\\\\Marketplace.js\",\n  _s = $RefreshSig$();\nimport { ethers, BigNumber } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst value = BigNumber.from(\"1000\");\nexport default function Marketplace({\n  marketplaceContract,\n  signer\n}) {\n  _s();\n  const [orders, setOrders] = useState([]);\n\n  // Fetch all open orders from contract\n  const fetchOrders = async () => {\n    if (!marketplaceContract) return;\n    try {\n      const count = await marketplaceContract.orderCount();\n      const fetched = [];\n      for (let i = 1; i <= count; i++) {\n        const order = await marketplaceContract.orders(i);\n        if (order.open) {\n          fetched.push({\n            id: i,\n            seller: order.seller,\n            token: order.token,\n            amount: order.amount,\n            pricePerToken: order.pricePerToken\n          });\n        }\n      }\n      setOrders(fetched);\n    } catch (err) {\n      console.error(\"Error fetching orders:\", err);\n    }\n  };\n\n  // Buy specified amount of tokens from order\n  const buyOrder = async (orderId, amount) => {\n    if (!marketplaceContract || !signer) return;\n    try {\n      const order = await marketplaceContract.orders(orderId);\n      if (!order.open) return alert(\"Order is closed!\");\n\n      // Calculate total value: pricePerToken * amount\n      const totalValue = order.pricePerToken.mul(ethers.BigNumber.from(amount));\n      const tx = await marketplaceContract.buy(orderId, amount, {\n        value: totalValue\n      });\n      await tx.wait();\n      alert(`Successfully bought ${amount} token(s)!`);\n      fetchOrders();\n    } catch (err) {\n      console.error(\"Error buying order:\", err);\n      alert(\"Transaction failed. Check console.\");\n    }\n  };\n  useEffect(() => {\n    if (marketplaceContract) fetchOrders();\n  }, [marketplaceContract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Marketplace\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), orders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No open orders available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this) : orders.map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: '1px solid gray',\n        margin: '5px',\n        padding: '5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Seller: \", order.seller]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Amount Available: \", order.amount.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Price per Token (wei): \", order.pricePerToken.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !order.open || order.amount.toString() === '0',\n        onClick: () => buyOrder(order.id, 1),\n        children: \"Buy 1 Token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, order.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(Marketplace, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = Marketplace;\nvar _c;\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["ethers","BigNumber","jsxDEV","_jsxDEV","value","from","Marketplace","marketplaceContract","signer","_s","orders","setOrders","useState","fetchOrders","count","orderCount","fetched","i","order","open","push","id","seller","token","amount","pricePerToken","err","console","error","buyOrder","orderId","alert","totalValue","mul","tx","buy","wait","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","style","border","margin","padding","toString","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Abhinav/Downloads/EnhancedLandNFT/EnhancedLandNFT/frontend/src/Marketplace.js"],"sourcesContent":["import { ethers, BigNumber } from 'ethers';\nconst value = BigNumber.from(\"1000\");\n\nexport default function Marketplace({ marketplaceContract, signer }) {\n  const [orders, setOrders] = useState([]);\n\n  // Fetch all open orders from contract\n  const fetchOrders = async () => {\n    if (!marketplaceContract) return;\n    try {\n      const count = await marketplaceContract.orderCount();\n      const fetched = [];\n      for (let i = 1; i <= count; i++) {\n        const order = await marketplaceContract.orders(i);\n        if (order.open) {\n          fetched.push({\n            id: i,\n            seller: order.seller,\n            token: order.token,\n            amount: order.amount,\n            pricePerToken: order.pricePerToken\n          });\n        }\n      }\n      setOrders(fetched);\n    } catch (err) {\n      console.error(\"Error fetching orders:\", err);\n    }\n  };\n\n  // Buy specified amount of tokens from order\n  const buyOrder = async (orderId, amount) => {\n    if (!marketplaceContract || !signer) return;\n\n    try {\n      const order = await marketplaceContract.orders(orderId);\n      if (!order.open) return alert(\"Order is closed!\");\n\n      // Calculate total value: pricePerToken * amount\n      const totalValue = order.pricePerToken.mul(ethers.BigNumber.from(amount));\n\n      const tx = await marketplaceContract.buy(orderId, amount, { value: totalValue });\n      await tx.wait();\n      alert(`Successfully bought ${amount} token(s)!`);\n      fetchOrders();\n    } catch (err) {\n      console.error(\"Error buying order:\", err);\n      alert(\"Transaction failed. Check console.\");\n    }\n  };\n\n  useEffect(() => {\n    if (marketplaceContract) fetchOrders();\n  }, [marketplaceContract]);\n\n  return (\n    <div>\n      <h3>Marketplace</h3>\n      {orders.length === 0 ? (\n        <p>No open orders available</p>\n      ) : (\n        orders.map((order) => (\n          <div\n            key={order.id}\n            style={{ border: '1px solid gray', margin: '5px', padding: '5px' }}\n          >\n            <p>Seller: {order.seller}</p>\n            <p>Amount Available: {order.amount.toString()}</p>\n            <p>Price per Token (wei): {order.pricePerToken.toString()}</p>\n            <button\n              disabled={!order.open || order.amount.toString() === '0'}\n              onClick={() => buyOrder(order.id, 1)}\n            >\n              Buy 1 Token\n            </button>\n          </div>\n        ))\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}